
//The global script scope
def ctx = context(scope: scriptScope())
contributor(ctx) {
    method(name: 'acceptGitLabMR', type: 'Object', params: [:], doc: 'Accept GitLab Merge Request')
    method(name: 'acceptGitLabMR', type: 'Object', namedParams: [parameter(name: 'mergeCommitMessage', type: 'java.lang.String'), ], doc: 'Accept GitLab Merge Request')
    method(name: 'addGitLabMRComment', type: 'Object', params: [:], doc: 'Add comment on GitLab Merge Request')
    method(name: 'addGitLabMRComment', type: 'Object', namedParams: [parameter(name: 'comment', type: 'java.lang.String'), ], doc: 'Add comment on GitLab Merge Request')
    method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
    method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
    method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
    method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'postsendScript', type: 'java.lang.String'), parameter(name: 'presendScript', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'Map'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
    method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'Map'], doc: 'Extended Email Recipients')
    method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
    method(name: 'exws', type: 'Object', params: [externalWorkspace:Map, body:'Closure'], doc: 'Use external workspace')
    method(name: 'exwsAllocate', type: 'Object', params: [diskPoolId:'java.lang.String'], doc: 'Allocate external workspace')
    method(name: 'exwsAllocate', type: 'Object', namedParams: [parameter(name: 'diskPoolId', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'selectedRun', type: 'Map'), parameter(name: 'strategy', type: 'Map'), ], doc: 'Allocate external workspace')
    method(name: 'gitlabBuilds', type: 'Object', params: [body:'Closure'], doc: 'Notify gitlab about pending builds')
    method(name: 'gitlabBuilds', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'builds', type: 'Map'), ], doc: 'Notify gitlab about pending builds')
    method(name: 'gitlabCommitStatus', type: 'Object', params: [body:'Closure'], doc: 'Update the commit status in GitLab depending on the build status')
    method(name: 'gitlabCommitStatus', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), ], doc: 'Update the commit status in GitLab depending on the build status')
    method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'Map'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'jiraAddComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Comment')
    method(name: 'jiraAddWatcher', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Watcher')
    method(name: 'jiraAssignIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Assign Issue')
    method(name: 'jiraAssignableUserSearch', type: 'Object', namedParams: [parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Searches assignable JIRA Users by username, name or email address for the given project\/issueKey')
    method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'JIRA: Add a comment to issue(s)')
    method(name: 'jiraDeleteAttachment', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete Attachment')
    method(name: 'jiraDeleteAttachment', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Attachment')
    method(name: 'jiraDeleteIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete IssueLink')
    method(name: 'jiraDeleteIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete IssueLink')
    method(name: 'jiraDeleteIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Link by linkId.')
    method(name: 'jiraDeleteIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Links by globalId.')
    method(name: 'jiraDownloadAttachment', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'override', type: 'boolean'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Download a file to workspace (directory is optional)')
    method(name: 'jiraEditComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue Comment')
    method(name: 'jiraEditComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'component', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Component')
    method(name: 'jiraEditIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'issue', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue')
    method(name: 'jiraEditVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Version')
    method(name: 'jiraGetAttachmentInfo', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Attachment Info')
    method(name: 'jiraGetAttachmentInfo', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Attachment Info')
    method(name: 'jiraGetComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comment')
    method(name: 'jiraGetComments', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Comments')
    method(name: 'jiraGetComments', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comments')
    method(name: 'jiraGetComponent', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component')
    method(name: 'jiraGetComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component')
    method(name: 'jiraGetComponentIssueCount', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component Issue Count')
    method(name: 'jiraGetComponentIssueCount', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component Issue Count')
    method(name: 'jiraGetFields', type: 'Object', params: [:], doc: 'JIRA Steps: Get Fields')
    method(name: 'jiraGetFields', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Fields')
    method(name: 'jiraGetIssue', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue')
    method(name: 'jiraGetIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue')
    method(name: 'jiraGetIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get IssueLink')
    method(name: 'jiraGetIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get IssueLink')
    method(name: 'jiraGetIssueLinkTypes', type: 'Object', params: [:], doc: 'JIRA Steps: Get Issue Link Types')
    method(name: 'jiraGetIssueLinkTypes', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Link Types')
    method(name: 'jiraGetIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Link by linkId.')
    method(name: 'jiraGetIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Links by globalId.')
    method(name: 'jiraGetIssueTransitions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Transitions')
    method(name: 'jiraGetIssueTransitions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Transitions')
    method(name: 'jiraGetIssueWatches', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Watches')
    method(name: 'jiraGetIssueWatches', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Watches')
    method(name: 'jiraGetProject', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project')
    method(name: 'jiraGetProject', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project')
    method(name: 'jiraGetProjectComponents', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Components')
    method(name: 'jiraGetProjectComponents', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Components')
    method(name: 'jiraGetProjectStatuses', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Statuses')
    method(name: 'jiraGetProjectStatuses', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Statuses')
    method(name: 'jiraGetProjectVersions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Versions')
    method(name: 'jiraGetProjectVersions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Versions')
    method(name: 'jiraGetProjects', type: 'Object', params: [:], doc: 'JIRA Steps: Get Projects')
    method(name: 'jiraGetProjects', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Projects')
    method(name: 'jiraGetVersion', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Version')
    method(name: 'jiraGetVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Version')
    method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
    method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'JIRA: Issue selector')
    method(name: 'jiraJqlSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA Steps: JQL Search')
    method(name: 'jiraJqlSearch', type: 'Object', namedParams: [parameter(name: 'jql', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: JQL Search')
    method(name: 'jiraLinkIssues', type: 'Object', namedParams: [parameter(name: 'type', type: 'java.lang.String'), parameter(name: 'inwardKey', type: 'java.lang.String'), parameter(name: 'outwardKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Link Issues')
    method(name: 'jiraNewComponent', type: 'Object', params: [component:'java.lang.Object'], doc: 'JIRA Steps: Create New Component')
    method(name: 'jiraNewComponent', type: 'Object', namedParams: [parameter(name: 'component', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Component')
    method(name: 'jiraNewIssue', type: 'Object', params: [issue:'Map'], doc: 'JIRA Steps: Create New Issue')
    method(name: 'jiraNewIssue', type: 'Object', namedParams: [parameter(name: 'issue', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issue')
    method(name: 'jiraNewIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'remoteLink', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create new remote link for given issue.')
    method(name: 'jiraNewIssues', type: 'Object', params: [issues:'Map'], doc: 'JIRA Steps: Create New Issues')
    method(name: 'jiraNewIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issues')
    method(name: 'jiraNewVersion', type: 'Object', params: [version:'java.lang.Object'], doc: 'JIRA Steps: Create New Version')
    method(name: 'jiraNewVersion', type: 'Object', namedParams: [parameter(name: 'version', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Version')
    method(name: 'jiraNotifyIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'notify', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Notify Issue')
    method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA: Search issues')
    method(name: 'jiraTransitionIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Transition Issue')
    method(name: 'jiraUploadAttachment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Attach a file from workspace to an issue')
    method(name: 'jiraUserSearch', type: 'Object', params: [queryStr:'java.lang.String'], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
    method(name: 'jiraUserSearch', type: 'Object', namedParams: [parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
    method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
    method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
    method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
    method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')
    method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
    method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
    method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
    method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
    method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
    method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
    method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
    method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
    method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
    method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
    method(name: 'throttle', type: 'Object', params: [categories:Map, body:'Closure'], doc: 'Throttle execution of node blocks within this body')
    method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
    method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
    method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
    method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'updateGitlabCommitStatus', type: 'Object', params: [:], doc: 'Update the commit status in GitLab')
    method(name: 'updateGitlabCommitStatus', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Update the commit status in GitLab')
    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
    method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')
    method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')
    method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
    method(name: 'addInteractivePromotion', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'displayName', type: 'java.lang.String'), ], doc: 'Add Interactive promotion')
    method(name: 'artifactoryDistributeBuild', type: 'Object', namedParams: [parameter(name: 'distributionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Distribute build')
    method(name: 'artifactoryPromoteBuild', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Promote build')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
    method(name: 'collectEnv', type: 'Object', params: [env:'Map'], doc: 'Advanced/Deprecated Collect environment variables and system properties')
    method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
    method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
    method(name: 'getArtifactoryServer', type: 'Object', params: [artifactoryServerID:'java.lang.String'], doc: 'Advanced/Deprecated Get Artifactory server from Jenkins config')
    method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
    method(name: 'newBuildInfo', type: 'Object', params: [:], doc: 'Advanced/Deprecated New buildInfo')
    method(name: 'newGradleBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory gradle executor')
    method(name: 'newMavenBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory maven')
    method(name: 'podTemplate', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'activeDeadlineSeconds', type: 'int'), parameter(name: 'annotations', type: 'Map'), parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'containers', type: 'Map'), parameter(name: 'envVars', type: 'Map'), parameter(name: 'idleMinutes', type: 'int'), parameter(name: 'imagePullSecrets', type: 'Map'), parameter(name: 'inheritFrom', type: 'java.lang.String'), parameter(name: 'instanceCap', type: 'int'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'nodeSelector', type: 'java.lang.String'), parameter(name: 'nodeUsageMode', type: 'java.lang.String'), parameter(name: 'serviceAccount', type: 'java.lang.String'), parameter(name: 'slaveConnectTimeout', type: 'int'), parameter(name: 'volumes', type: 'Map'), parameter(name: 'workingDir', type: 'java.lang.String'), parameter(name: 'workspaceVolume', type: 'Map'), parameter(name: 'yaml', type: 'java.lang.String'), ], doc: 'Define a podTemplate to use in the kubernetes plugin')
    method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
    method(name: 'xrayScanBuild', type: 'Object', namedParams: [parameter(name: 'xrayScanConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Xray build scanning')
    property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
    property(name: 'Artifactory', type: 'org.jfrog.hudson.pipeline.dsl.ArtifactoryDSL')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
        method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
        method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'General SCM')
        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'General SCM')
        method(name: 'containerLog', type: 'Object', params: [name:'java.lang.String'], doc: 'Get container log from Kubernetes')
        method(name: 'containerLog', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'limitBytes', type: 'int'), parameter(name: 'returnLog', type: 'boolean'), parameter(name: 'sinceSeconds', type: 'int'), parameter(name: 'tailingLines', type: 'int'), ], doc: 'Get container log from Kubernetes')
        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
        method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
        method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
        method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
        method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
        method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
        method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
        method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), ], doc: 'Archive JUnit-formatted test results')
        method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
        method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
        method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Script')
        method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
        method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
        method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
        method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
        method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
        method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
        method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
        method(name: 'sshagent', type: 'Object', params: [credentials:Map, body:'Closure'], doc: 'SSH Agent')
        method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'Map'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
        method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
        method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
        method(name: 'svn', type: 'Object', params: [url:'java.lang.String'], doc: 'Subversion')
        method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Subversion')
        method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
        method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
        method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
        method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
        method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
        method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
        method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
        method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), parameter(name: 'pretty', type: 'int'), ], doc: 'Write JSON to a file in the workspace.')
        method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
        method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
        method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), ], doc: 'Write a yaml from an object.')
        method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
        method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
        method(name: 'ArtifactoryGradleBuild', type: 'Object', namedParams: [parameter(name: 'gradleBuild', type: 'Map'), parameter(name: 'rootDir', type: 'java.lang.String'), parameter(name: 'buildFile', type: 'java.lang.String'), parameter(name: 'tasks', type: 'java.lang.String'), parameter(name: 'switches', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory gradle')
        method(name: 'MavenDescriptorStep', type: 'Object', namedParams: [parameter(name: 'pomFile', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'versionPerModule', type: 'Map'), parameter(name: 'failOnSnapshot', type: 'boolean'), parameter(name: 'dryRun', type: 'boolean'), ], doc: 'Get Artifactory Maven descriptor')
        method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
        method(name: 'artifactoryDownload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Download artifacts')
        method(name: 'artifactoryMavenBuild', type: 'Object', namedParams: [parameter(name: 'mavenBuild', type: 'Map'), parameter(name: 'pom', type: 'java.lang.String'), parameter(name: 'goals', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory maven')
        method(name: 'artifactoryUpload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Upload artifacts')
        method(name: 'conanAddRemote', type: 'Object', namedParams: [parameter(name: 'serverUrl', type: 'java.lang.String'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new repo to Conan config')
        method(name: 'conanAddUser', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new user to Conan config')
        method(name: 'container', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps in a container')
        method(name: 'container', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'shell', type: 'java.lang.String'), ], doc: 'Run build steps in a container')
        method(name: 'deployArtifacts', type: 'Object', namedParams: [parameter(name: 'deployer', type: 'Map'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Deploy artifacts')
        method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'buildArgs', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
        method(name: 'dockerPullStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Artifactory docker pull')
        method(name: 'dockerPushStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'properties', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Artifactory docker push')
        method(name: 'dockerPushWithProxyStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'properties', type: 'Map'), ], doc: 'Artifactory docker push')
        method(name: 'initConanClient', type: 'Object', params: [client:'Map'], doc: 'Advanced/Deprecated Create Conan Client')
        method(name: 'newArtifactoryServer', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Returns new Artifactory server')
        method(name: 'publishBuildInfo', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Publish build Info to Artifactory')
        method(name: 'runConanCommand', type: 'Object', namedParams: [parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), parameter(name: 'buildLogPath', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Run a Conan command')
        method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')
        method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
        method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
        method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
        method(name: 'withDockerRegistry', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'registry', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Sets up Docker registry endpoint')
        method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }
}

// Errors on:
// class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep: There's no @DataBoundConstructor on any constructor of class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep